{"version":3,"sources":["components/Navbar/logo.png","assets/1.mp3","assets/2.mp3","assets/3.mp3","assets/4.mp3","assets/GameOver.mp3","assets/music.mp3","components/Navbar/Navbar.js","components/GameContainer/GameContainer.js","components/Content/Content.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Nav","Fragment","Navbar","bg","variant","className","Brand","href","alt","src","Logo","width","height","GameContainer","initialState","useState","currentActive","setCurrentActive","currentIndex","setCurrentIndex","started","setStarted","initializing","setInitializing","gameOver","setGameOver","totalMoves","setTotalMoves","correctChoices","setCorrectChoices","useSound","redSound","volume","playRed","yellowSound","playYellow","blueSound","playBlue","greenSound","playGreen","gameOverSound","playGameover","sounds","handlePlayerClick","currentChoice","reduce","prev","cur","console","log","newState","setTimeout","onClick","newMoves","newArr","i","concat","Math","floor","random","forEach","choice","index","initMoves","colStyle","display","justifyContent","Content","Container","fluid","Row","Col","style","xs","sm","App","bgMusic","music","useEffect","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bb89d9e5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.9de44e83.png\";","module.exports = __webpack_public_path__ + \"static/media/1.1704d352.mp3\";","module.exports = __webpack_public_path__ + \"static/media/2.afdc303f.mp3\";","module.exports = __webpack_public_path__ + \"static/media/3.edff8af4.mp3\";","module.exports = __webpack_public_path__ + \"static/media/4.879d2195.mp3\";","module.exports = __webpack_public_path__ + \"static/media/GameOver.1ce68cdb.mp3\";","module.exports = __webpack_public_path__ + \"static/media/music.bab89d27.mp3\";","import React from 'react'\r\nimport { Navbar } from 'react-bootstrap'\r\nimport Logo from './logo.png'\r\nimport './Navbar.css'\r\n\r\nconst Nav = () => {\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t<Navbar bg=\"dark\" variant=\"dark\" className='navbar'>\r\n\t\t\t\t<Navbar.Brand href=\"home\">\r\n\t\t\t\t\t<img\r\n\t\t\t\t\t\talt=\"game logo\"\r\n\t\t\t\t\t\tsrc={Logo}\r\n\t\t\t\t\t\twidth=\"60\"\r\n\t\t\t\t\t\theight=\"60\"\r\n\t\t\t\t\t\tclassName=\"d-inline-block align-center\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t&nbsp;SIMON GAME\r\n\t\t\t\t</Navbar.Brand>\r\n\t\t\t</Navbar>\r\n\t\t</React.Fragment>\r\n\t)\r\n}\r\n\r\nexport default Nav","import React, { useState} from 'react'\r\nimport useSound from 'use-sound'\r\nimport './GameContainer.css'\r\n\r\n// Import sounds.\r\nimport redSound from '../../assets/1.mp3'\r\nimport yellowSound from '../../assets/2.mp3'\r\nimport blueSound from '../../assets/3.mp3'\r\nimport greenSound from '../../assets/4.mp3'\r\nimport gameOverSound from '../../assets/GameOver.mp3'\r\n\r\nexport default function GameContainer() {\r\n  const initialState = [false, false, false, false]\r\n  const [currentActive, setCurrentActive] = useState(initialState)\r\n\r\n  const [currentIndex, setCurrentIndex] = useState(0)\r\n  const [started, setStarted] = useState(false)\r\n  const [initializing, setInitializing] = useState(true)\r\n  const [gameOver, setGameOver] = useState(false)\r\n  const [totalMoves, setTotalMoves] = useState(0)\r\n  const [correctChoices, setCorrectChoices] = useState([0])\r\n\r\n  // Sound controls\r\n  const [playRed] = useSound(redSound, { volume: 1 })\r\n  const [playYellow] = useSound(yellowSound, { volume: 1 })\r\n  const [playBlue] = useSound(blueSound, { volume: 1 })\r\n  const [playGreen] = useSound(greenSound, { volume: 1 })\r\n  const [playGameover] = useSound(gameOverSound, { volume: 0.9 })\r\n  const sounds = [playRed, playYellow, playGreen, playBlue]\r\n\r\n  const initMoves = () => {\r\n    if (!gameOver)\r\n    {\r\n      let newMoves = totalMoves + 1\r\n      let newArr = []\r\n      for (let i = 0; i < newMoves; i++) {\r\n        newArr = newArr.concat(Math.floor(Math.random() * 4))\r\n      }\r\n      console.log(newArr)\r\n\r\n      setTotalMoves(newMoves)\r\n      setCorrectChoices(newArr)\r\n      setCurrentIndex(0)\r\n      setInitializing(true)\r\n      setGameOver(false)\r\n\r\n      newArr.forEach((choice, index) => {\r\n        setTimeout(() => {\r\n\r\n          const newState = [...currentActive]\r\n          newState[choice] = true\r\n          setCurrentActive(newState)\r\n          sounds[choice]()\r\n          \r\n          setTimeout(() => {\r\n            console.log(choice)\r\n            if (index === newMoves - 1) {\r\n              setInitializing(false)\r\n              console.log(newArr)\r\n            }\r\n            setCurrentActive(initialState)\r\n          }, 300)\r\n        \r\n        }, 400 + index * 1000)\r\n      })\r\n    }\r\n  }\r\n\r\n  const handlePlayerClick = (currentChoice) => {\r\n    const result = currentActive.reduce((prev, cur) => prev || cur)\r\n    // console.log(paused)\r\n    if (!result && !initializing && started) {\r\n      if (currentIndex < totalMoves && correctChoices[currentIndex] !== currentChoice) {\r\n        console.log(correctChoices[currentIndex], currentChoice)\r\n        console.log('Game over')\r\n        playGameover()\r\n        setTotalMoves(0)\r\n        setGameOver(true)\r\n        setStarted(false)\r\n      }\r\n      // console.debug('Here', index)\r\n      // console.debug(currentActive)\r\n      const newState = [...currentActive]\r\n      newState[currentChoice] = true\r\n      sounds[currentChoice]()\r\n      setCurrentActive(newState)\r\n      setCurrentIndex(currentIndex + 1)\r\n\r\n      if (currentIndex === totalMoves - 1) {\r\n        setStarted(false)\r\n      }\r\n      \r\n      setTimeout(() => {\r\n        setCurrentActive(initialState)\r\n      }, 300)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className='game-container'>\r\n      <div className='board-wrapper'>\r\n        <div\r\n          onClick={() => {handlePlayerClick(0)}}\r\n          className={`top-left player-button ${currentActive[0] ? 'top-left-active' : ''}`}\r\n        ></div>\r\n\r\n        <div \r\n          onClick={() => {handlePlayerClick(1)}}\r\n          className={`top-right player-button ${currentActive[1] ? 'top-right-active' : ''}`}\r\n        ></div>\r\n        \r\n        <div \r\n          onClick={() => {handlePlayerClick(2)}}\r\n          className={`bottom-left player-button ${currentActive[2] ? 'bottom-left-active' : ''}`}\r\n        ></div>\r\n        \r\n        <div \r\n          onClick={() => {handlePlayerClick(3)}}\r\n          className={`bottom-right player-button ${currentActive[3] ? 'bottom-right-active' : ''}`}\r\n        ></div>\r\n        \r\n        <div onClick={() => {\r\n          if (!started) {\r\n            setStarted(true)\r\n            initMoves()\r\n          }\r\n        }} className='center-menu'>\r\n          {started ? '' : 'Start'}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Container, Row, Col } from 'react-bootstrap'\r\nimport GameContainer from '../GameContainer/GameContainer'\r\n\r\nconst colStyle = {\r\n  display: 'flex',\r\n  justifyContent: 'center',\r\n}\r\n\r\nconst Content = () => {\r\n  return (\r\n    <Container fluid>\r\n      <Row>\r\n        <Col style={colStyle} xs={0} sm={3}></Col>\r\n        <Col style={colStyle} xs={12} sm={6}>\r\n          <GameContainer />\r\n        </Col>\r\n        <Col style={colStyle} xs={0} sm={3}></Col>\r\n      </Row>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Content\r\n","import React, { useEffect } from 'react'\nimport useSound from 'use-sound'\nimport Navbar from './components/Navbar/Navbar'\nimport Content from './components/Content/Content'\nimport bgMusic from './assets/music.mp3'\n\nconst App = () => {\n  const [music] = useSound(bgMusic, { volume: 0.6 })\n\n  useEffect(() => {\n    music()\n  })\n  \n  return (\n    <div>\n      <Navbar />\n      <Content />\n    </div>\n  );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}